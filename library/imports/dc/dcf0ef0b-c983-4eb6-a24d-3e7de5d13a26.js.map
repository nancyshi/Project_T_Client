{"version":3,"sources":["../../../../../assets/scripts/towerDefens/assets/scripts/towerDefens/gameMgr.js"],"names":["cc","Class","extends","Component","properties","refreshConfig","JsonAsset","waveConfig","maxHeath","get","_maxHeath","set","value","currentHeath","_currentHeath","setupLabels","onFail","isRefreshStarted","_isRefreshStarted","onRefreshStart","currentWaveIndex","_currentWaveIndex","onWaveIndexChange","currentMonstorIndex","_currentMonstorIndex","onMonstorIndexChange","waveTimer","_waveTimer","currentTime","targetTime","tempIndex","json","length","monstorTimer","_monstorTimer","currentMonstorConfig","currentWaveConfig","mapMgr","testPrefab","Prefab","testTowerPrefab","waveLabel","Label","heathLabel","alivedMonstors","start","find","getComponent","update","dt","tempTime","waveId","toString","monstorId","monstorPrefab","getMonstorPrefabById","oneMonstor","instantiate","monstorMgr","pathId","basePathPoints","pathes","x","y","push","addChild","timeDelta","onMonstorRefreshCompelete","givenId","resMgr","monstorRes","reses","monstors","prefab","waveDelta","string"],"mappings":"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","file":"gameMgr.js","sourceRoot":"../../../../../assets/scripts/towerDefens","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        refreshConfig: cc.JsonAsset,\n        waveConfig: cc.JsonAsset,\n        maxHeath: {\n            get() {\n                if (this._maxHeath == null) {\n                    this._maxHeath = 10\n                }\n                return this._maxHeath\n            },\n            set(value) {\n                this._maxHeath = value\n            }\n        },\n        currentHeath: {\n            get() {\n                if (this._currentHeath == null) {\n                    this._currentHeath = 10\n                }\n                return this._currentHeath\n            },\n            set(value) {\n                this._currentHeath = value\n                if (value >= 0 ) {\n                    this.setupLabels()\n                }\n                else {\n                    this.onFail()\n                }\n            }\n        },\n        isRefreshStarted: {\n            get() {\n                return this._isRefreshStarted\n            },\n            set(value) {\n                this._isRefreshStarted = value\n                if (value == true) {\n                    this.onRefreshStart()\n                }\n            }\n        },\n\n        currentWaveIndex: {\n            get() {\n                return this._currentWaveIndex\n            },\n            set(value) {\n                this._currentWaveIndex = value\n                this.setupLabels()\n                this.onWaveIndexChange()\n            }\n        },\n        currentMonstorIndex: {\n            get() {\n                return this._currentMonstorIndex\n            },\n            set(value) {\n                this._currentMonstorIndex = value\n                this.onMonstorIndexChange()\n            }\n        },\n        waveTimer: {\n            get() {\n                if (this._waveTimer == null) {\n                    this._waveTimer = {\n                        currentTime: null,\n                        targetTime: null\n                    }\n                }\n                return this._waveTimer\n            },\n            set(value) {\n                this._waveTimer = value\n                if (value.currentTime >= value.targetTime) {\n                    var tempIndex = this.currentWaveIndex + 1\n                    if (tempIndex <= this.refreshConfig.json.length - 1) {\n                        this.waveTimer.currentTime = null\n                        this.currentWaveIndex += 1\n                    }\n                }\n            }\n        },\n        monstorTimer: {\n            get() {\n                if (this._monstorTimer == null) {\n                    this._monstorTimer = {\n                        currentTime: null,\n                        targetTime: null\n                    }\n                }\n                return this._monstorTimer\n            },\n            set(value) {\n                this._monstorTimer = value\n                if (value.currentTime >= value.targetTime) {\n                    var tempIndex = this.currentMonstorIndex + 1\n                    if (tempIndex <= this.currentMonstorConfig.length - 1) {\n                        this.monstorTimer.currentTime = null\n                        this.currentMonstorIndex += 1\n                    }\n\n                }\n            }\n        },\n        currentWaveConfig: null,\n        currentMonstorConfig: null,\n        mapMgr: null,\n        testPrefab: cc.Prefab,\n        testTowerPrefab: cc.Prefab,\n\n        waveLabel: cc.Label,\n        heathLabel: cc.Label,\n        alivedMonstors: []\n        \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.maxHeath = 10\n        this.currentHeath = 10\n        this.mapMgr = cc.find(\"Canvas/mapNode\").getComponent(\"mapMgr\")\n        this.isRefreshStarted = true  \n    },\n\n    update (dt) {\n        if (this.waveTimer.currentTime != null) {\n            var tempTime = this.waveTimer.currentTime + dt\n            var targetTime = this.waveTimer.targetTime\n            this.waveTimer = {\n                currentTime: tempTime,\n                targetTime: targetTime\n            }\n        }\n        if (this.monstorTimer.currentTime != null) {\n            var tempTime = this.monstorTimer.currentTime + dt\n            var targetTime = this.monstorTimer.targetTime\n            this.monstorTimer = {\n                currentTime: tempTime,\n                targetTime: targetTime\n            }\n        }\n    },\n\n    onRefreshStart() {\n        this.currentWaveIndex = 0\n    },\n\n    onWaveIndexChange() {\n        this.currentWaveConfig = this.refreshConfig.json[this.currentWaveIndex]\n        var waveId = this.currentWaveConfig.waveId\n        this.currentMonstorConfig = this.waveConfig.json[waveId.toString()]\n        if (this.currentMonstorConfig.length > 0) {\n            this.currentMonstorIndex = 0\n        }\n    },\n    onMonstorIndexChange() {\n        var monstorId = this.currentMonstorConfig[this.currentMonstorIndex].monstorId\n\n        var monstorPrefab = this.getMonstorPrefabById(monstorId)\n        var oneMonstor = cc.instantiate(monstorPrefab)\n        var monstorMgr = oneMonstor.getComponent(\"monstorMgr\")\n        var pathId = this.currentMonstorConfig[this.currentMonstorIndex].pathId\n        \n        monstorMgr.basePathPoints = this.mapMgr.pathes[pathId.toString()]\n\n        oneMonstor.x = -1000\n        oneMonstor.y = -1000\n        this.alivedMonstors.push(oneMonstor)\n        cc.find(\"Canvas\").addChild(oneMonstor)\n\n        if (this.currentMonstorIndex < this.currentMonstorConfig.length - 1) {\n            var timeDelta = this.currentMonstorConfig[this.currentMonstorIndex].timeDelta\n            this.monstorTimer = {\n                currentTime: 0,\n                targetTime: timeDelta\n            }\n        }\n        else {\n            this.onMonstorRefreshCompelete()\n        }\n    },\n    getMonstorPrefabById(givenId) {\n        var resMgr = cc.find(\"Canvas/resNode\").getComponent(\"resMgr\")\n        var monstorRes = resMgr.reses.monstors\n        var prefab = monstorRes[givenId.toString()]\n        return prefab\n    },\n\n    onMonstorRefreshCompelete() {\n        if (this.currentWaveIndex < this.refreshConfig.json.length - 1) {\n            var timeDelta = this.currentWaveConfig.waveDelta\n            this.waveTimer = {\n                currentTime: 0,\n                targetTime: timeDelta\n            }\n        }\n    },\n    \n    setupLabels() {\n        this.waveLabel.string = (this.currentWaveIndex + 1).toString() + \" / \" + this.refreshConfig.json.length.toString()\n        this.heathLabel.string = this.currentHeath.toString() + \" / \" + this.maxHeath.toString()\n    },\n\n    onFail() {\n\n    }\n});\n"]}