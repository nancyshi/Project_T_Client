{"version":3,"sources":["../../../../../../assets/scripts/towerDefens/level/assets/scripts/towerDefens/level/gameMgr.js"],"names":["cc","Class","extends","Component","properties","refreshPlanId","get","_refreshPlanId","set","value","refreshPlan","require","toString","currentWaveIndex","_currentWaveIndex","onWaveIndexChange","currentMonstorIndex","_currentMonstorIndex","onMonstorIndexChange","resMgr","mapMgr","wavesNum","num","Object","keys","length","monstorsNumOfCurrentWave","monstorsConfig","alivedMonstors","alivedMonstorsNum","_alivedMonstorsNum","onMonstorsOfCurrentWaveCleared","towers","maxHp","currentHp","_currentHp","hpLabel","string","onFail","waveLabel","Label","resourceLabel","resourceProcessBar","ProgressBar","resourceNum","_resourceNum","maxResourceNum","isResourceIncreased","resourceIncreaseSpeed","resourceNumTimer","_resourceNumTimer","tempProgressValue","progress","start","find","getComponent","self","tween","node","delay","call","startRefresh","update","dt","monstorConfig","monstorId","prefab","getMonstorPrefabById","monstor","instantiate","pathId","timeDelta","x","y","push","config","monstorMgr","basePathPoints","pathes","moveSpeed","battleElementMgr","magicalDefense","physicalDefense","delegate","addChild","scheduleOnce","onMonstorsOfCurrentWaveRefreshComplete","waveDelta","onWin","givenId","monstorObj","resId","reses","director","pause","log"],"mappings":"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","file":"gameMgr.js","sourceRoot":"../../../../../../assets/scripts/towerDefens/level","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        refreshPlanId: {\n            get() {\n                return this._refreshPlanId\n            },\n            set(value) {\n                this._refreshPlanId = value\n                this.refreshPlan = require(\"refreshConfig\")[this.refreshPlanId.toString()]\n            }\n        },\n        refreshPlan: null,\n        currentWaveIndex: {\n            get() {\n                return this._currentWaveIndex\n            },\n            set(value) {\n                this._currentWaveIndex = value\n                this.onWaveIndexChange()\n            }\n        },\n        currentMonstorIndex: {\n            get() {\n                return this._currentMonstorIndex \n            },\n            set(value) {\n                this._currentMonstorIndex = value\n                this.onMonstorIndexChange()\n            }\n        },\n\n        resMgr: null,\n        mapMgr: null,\n\n        wavesNum: {\n            get(){\n                var num = null\n                if (this.refreshPlan != null) {\n                    num = Object.keys(this.refreshPlan).length\n                }\n                return num\n            }\n        },\n\n        monstorsNumOfCurrentWave: {\n            get() {\n                var num = null\n                if (this.refreshPlan != null) {\n                    //num = Object.keys(this.refreshPlan[this.currentWaveIndex.toString()].monstorsConfig).length\n                    var monstorsConfig = this.refreshPlan[this.currentWaveIndex.toString()].monstorsConfig\n                    num = Object.keys(monstorsConfig).length\n                }\n                return num\n            }\n        },\n\n        alivedMonstors: [],\n        alivedMonstorsNum: {\n            get() {\n                return this._alivedMonstorsNum\n            },\n            set(value) {\n                this._alivedMonstorsNum = value\n                if (value == 0) {\n                    this.onMonstorsOfCurrentWaveCleared()\n                }\n            }\n        },\n        towers: [],\n\n        maxHp: 10,\n        currentHp: {\n            get() {\n                return this._currentHp\n            },\n            set(value) {\n                this._currentHp = value\n                this.hpLabel.string = value.toString() + \" / \" + this.maxHp.toString()\n                if (value == 0) {\n                    this.onFail()\n                }\n            }\n        },\n\n        waveLabel: cc.Label,\n        hpLabel: cc.Label,\n        resourceLabel: cc.Label,\n        resourceProcessBar: cc.ProgressBar,\n        resourceNum: {\n            get() {\n                return this._resourceNum\n            },\n            set(value) {\n                this._resourceNum = value\n                this.resourceLabel.string = this.resourceNum.toString()\n                if (value < this.maxResourceNum) {\n                    this.isResourceIncreased = true\n                }\n            }\n        },\n        maxResourceNum: 10,\n        resourceIncreaseSpeed: 3,\n\n        resourceNumTimer: {\n            get() {\n                if (this._resourceNumTimer == null) {\n                    this._resourceNumTimer = 0\n                }\n                return this._resourceNumTimer\n            },\n            set(value) {\n                this._resourceNumTimer = value\n                var tempProgressValue = value / this.resourceIncreaseSpeed\n                if (tempProgressValue > 1) {\n                    tempProgressValue = 1\n                }\n                this.resourceProcessBar.progress = tempProgressValue\n                if (value >= this.resourceIncreaseSpeed) {\n                    if (this.resourceNum < this.maxResourceNum) {\n                        this.resourceNum += 1\n                        this.resourceNumTimer = 0\n                    }\n                    else {\n                        this.isResourceIncreased = false\n                    }\n                }\n            }\n        },\n\n        isResourceIncreased: false\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.resMgr = cc.find(\"Canvas/resNode\").getComponent(\"resMgr\")\n        this.mapMgr = cc.find(\"Canvas/mapNode\").getComponent(\"mapMgr\")\n        this.currentHp = this.maxHp\n        this.waveLabel.string = \"0 / \" + this.wavesNum.toString()\n\n        //test\n        var self = this\n        cc.tween(this.node)\n            .delay(2)\n            .call(function(){\n                self.startRefresh()\n            })\n            .start()\n    },\n\n    update (dt) {\n        if (this.isResourceIncreased == true) {\n            this.resourceNumTimer += dt\n        }\n    },\n\n    startRefresh() {\n        this.currentWaveIndex = 1\n    },\n\n    onWaveIndexChange() {\n        this.waveLabel.string = this.currentWaveIndex.toString() + \" / \" + this.wavesNum.toString()\n        this.currentMonstorIndex = 1\n    },\n\n    onMonstorIndexChange() {\n        var monstorConfig = this.refreshPlan[this.currentWaveIndex.toString()].monstorsConfig[this.currentMonstorIndex.toString()]\n        var monstorId = monstorConfig.monstorId\n        var prefab = this.getMonstorPrefabById(monstorId)\n        var monstor = cc.instantiate(prefab)\n        var pathId = monstorConfig.pathId\n        var timeDelta = monstorConfig.timeDelta\n\n        monstor.x = -1000\n        monstor.y = -1000\n        this.alivedMonstors.push(monstor)\n        this.alivedMonstorsNum = this.alivedMonstors.length\n        \n        var config = require(\"monstorConfig\")[monstorId.toString()]\n        var monstorMgr = monstor.getComponent(\"monstorMgr\")\n        monstorMgr.basePathPoints = this.mapMgr.pathes[pathId.toString()]\n        monstorMgr.moveSpeed = config.moveSpeed\n\n        var battleElementMgr = monstor.getComponent(\"battleElementMgr\")\n        battleElementMgr.maxHp = config.maxHp\n        battleElementMgr.magicalDefense = config.magicalDefense\n        battleElementMgr.physicalDefense = config.physicalDefense\n        battleElementMgr.delegate = monstorMgr\n\n\n        cc.find(\"Canvas\").addChild(monstor)\n        if (this.currentMonstorIndex < this.monstorsNumOfCurrentWave) {\n            var self = this\n            this.scheduleOnce(function(){\n                self.currentMonstorIndex += 1\n            },timeDelta)\n        }\n        else {\n            this.onMonstorsOfCurrentWaveRefreshComplete()\n        }\n    },\n\n    onMonstorsOfCurrentWaveRefreshComplete() {\n\n    },\n\n    onMonstorsOfCurrentWaveCleared(){\n        if (this.currentWaveIndex < this.wavesNum) {\n            var waveDelta = this.refreshPlan[this.currentWaveIndex.toString()].waveDelta\n            var self = this\n            this.scheduleOnce(function(){\n                self.currentWaveIndex += 1\n            },waveDelta)\n        }\n\n        else {\n            this.onWin()\n        }\n    },\n\n    getMonstorPrefabById(givenId) {\n        var monstorConfig = require(\"monstorConfig\")\n        var monstorObj = monstorConfig[givenId.toString()]\n        var resId = monstorObj.resId\n        var prefab = this.resMgr.reses[resId.toString()][\"prefabName\"]\n        return prefab\n    },\n\n    onWin() {\n\n    },\n\n    onFail() {\n        cc.director.pause()\n        cc.log(\"YOU LOSE\")\n    },\n\n});\n"]}