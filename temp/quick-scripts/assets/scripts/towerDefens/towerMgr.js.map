{"version":3,"sources":["towerMgr.js"],"names":["cc","Class","extends","Component","properties","hurt","hurtDelta","hurtRange","attackRange","monstors","canAttack","get","_canAttack","set","value","self","scheduleOnce","start","find","getComponent","update","dt","length","index","oneMonstor","dis","getDisOfTwoPoint","position","node","attackOneMonstor","p1","p2","temp","x","y","Math","sqrt","monstor","monstorMgr","getHurt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,cAAM,EADE;AAERC,mBAAW,CAFH,EAEM;AACdC,mBAAW,CAAC,CAHJ,EAGO;AACfC,qBAAa,IAJL;AAKRC,kBAAU,IALF;AAMRC,mBAAW;AACPC,eADO,iBACD;AACF,oBAAI,KAAKC,UAAL,IAAmB,IAAvB,EAA6B;AACzB,yBAAKA,UAAL,GAAkB,IAAlB;AACH;AACD,uBAAO,KAAKA,UAAZ;AACH,aANM;AAOPC,eAPO,eAOHC,KAPG,EAOI;AACP,qBAAKF,UAAL,GAAkBE,KAAlB;AACA,oBAAIA,SAAS,KAAb,EAAoB;AAChB,wBAAIC,OAAO,IAAX;AACA,yBAAKC,YAAL,CAAkB,YAAU;AACxBD,6BAAKH,UAAL,GAAkB,IAAlB;AACH,qBAFD,EAEE,KAAKN,SAFP;AAGH;AACJ;AAfM;AANH,KAHP;;AA4BL;;AAEA;;AAEAW,SAhCK,mBAgCI;AACL,aAAKR,QAAL,GAAgBT,GAAGkB,IAAH,CAAQ,gBAAR,EAA0BC,YAA1B,CAAuC,QAAvC,EAAiDV,QAAjE;AACA,aAAKD,WAAL,GAAmB,GAAnB;AACH,KAnCI;AAqCLY,UArCK,kBAqCGC,EArCH,EAqCO;AACR,YAAI,KAAKX,SAAL,IAAkB,KAAtB,EAA6B;AACzB;AACH;AACD,YAAI,KAAKD,QAAL,IAAiB,IAAjB,IAAyB,KAAKA,QAAL,CAAca,MAAd,GAAuB,CAApD,EAAuD;AACnD,iBAAK,IAAIC,KAAT,IAAkB,KAAKd,QAAvB,EAAiC;AAC7B,oBAAIe,aAAa,KAAKf,QAAL,CAAcc,KAAd,CAAjB;AACA,oBAAIE,MAAM,KAAKC,gBAAL,CAAsBF,WAAWG,QAAjC,EAA0C,KAAKC,IAAL,CAAUD,QAApD,CAAV;AACA,oBAAIF,OAAO,KAAKjB,WAAhB,EAA6B;AACzB,yBAAKqB,gBAAL,CAAsBL,UAAtB;AACA;AACH;AACJ;AACJ;AACJ,KAnDI;AAqDLE,oBArDK,4BAqDYI,EArDZ,EAqDeC,EArDf,EAqDmB;AACpB,YAAIC,OAAO,CAACD,GAAGE,CAAH,GAAOH,GAAGG,CAAX,KAAiBF,GAAGE,CAAH,GAAOH,GAAGG,CAA3B,IAAgC,CAACF,GAAGG,CAAH,GAAOJ,GAAGI,CAAX,KAAiBH,GAAGG,CAAH,GAAOJ,GAAGI,CAA3B,CAA3C;AACA,eAAOC,KAAKC,IAAL,CAAUJ,IAAV,CAAP;AACH,KAxDI;AAyDLH,oBAzDK,4BAyDYQ,OAzDZ,EAyDqB;AACtB,aAAK3B,SAAL,GAAiB,KAAjB;AACA,YAAI4B,aAAaD,QAAQlB,YAAR,CAAqB,YAArB,CAAjB;AACAmB,mBAAWC,OAAX,CAAmB,KAAKlC,IAAxB;AACH;AA7DI,CAAT","file":"towerMgr.js","sourceRoot":"../../../../../assets/scripts/towerDefens","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        hurt: 10,\n        hurtDelta: 1, // mesured by second\n        hurtRange: -1, // -1 indicate that the tower will attack only one enmy\n        attackRange: 1000,\n        monstors: null,\n        canAttack: {\n            get() {\n                if (this._canAttack == null) {\n                    this._canAttack = true\n                }\n                return this._canAttack\n            },\n            set(value) {\n                this._canAttack = value\n                if (value == false) {\n                    var self = this\n                    this.scheduleOnce(function(){\n                        self._canAttack = true\n                    },this.hurtDelta)\n                }\n            }\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.monstors = cc.find(\"Canvas/mapNode\").getComponent(\"mapMgr\").monstors\n        this.attackRange = 300\n    },\n\n    update (dt) {\n        if (this.canAttack == false) {\n            return\n        }\n        if (this.monstors != null && this.monstors.length > 0) {\n            for (var index in this.monstors) {\n                var oneMonstor = this.monstors[index]\n                var dis = this.getDisOfTwoPoint(oneMonstor.position,this.node.position)\n                if (dis <= this.attackRange) {\n                    this.attackOneMonstor(oneMonstor)\n                    break\n                }\n            }\n        }\n    },\n\n    getDisOfTwoPoint(p1,p2) {\n        var temp = (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y)\n        return Math.sqrt(temp)  \n    },\n    attackOneMonstor(monstor) {\n        this.canAttack = false\n        var monstorMgr = monstor.getComponent(\"monstorMgr\")\n        monstorMgr.getHurt(this.hurt)\n    }\n});\n"]}