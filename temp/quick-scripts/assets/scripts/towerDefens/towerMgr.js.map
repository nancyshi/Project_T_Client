{"version":3,"sources":["towerMgr.js"],"names":["cc","Class","extends","Component","properties","hurt","hurtDelta","hurtRange","attackRange","hurtType","monstors","canAttack","get","_canAttack","set","value","self","scheduleOnce","bulletEffectPrefab","Prefab","hurtEffectPrefab","bulletEffectOffset","v2","currentEffect","start","find","getComponent","alivedMonstors","update","dt","length","index","oneMonstor","dis","x","node","y","mag","attackOneMonstor","effect","instantiate","effectMgr","effectType","target","delegate","animate","Animation","play","playEffect","addChild","_acturalHurt","monstor","monstorMgr","getHurt","monstorsForHurt","push","getDisOfTwoPoint","position"],"mappings":"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","file":"towerMgr.js","sourceRoot":"../../../../../assets/scripts/towerDefens","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        hurt: 10,\n        hurtDelta: 1, // mesured by second\n        hurtRange: -1, // -1 indicate that the tower will attack only one enmy\n        attackRange: 1000,\n        hurtType: 1, //1 indicate physical, 2 indicate magical\n        monstors: null,\n        canAttack: {\n            get() {\n                if (this._canAttack == null) {\n                    this._canAttack = true\n                }\n                return this._canAttack\n            },\n            set(value) {\n                this._canAttack = value\n                if (value == false) {\n                    var self = this\n                    this.scheduleOnce(function(){\n                        self._canAttack = true\n                    },this.hurtDelta)\n                }\n            }\n        },\n        bulletEffectPrefab: cc.Prefab,\n        hurtEffectPrefab: cc.Prefab,\n        bulletEffectOffset: cc.v2(0,0),\n        currentEffect: null,   \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.monstors = cc.find(\"Canvas/gameMgrNode\").getComponent(\"gameMgr\").alivedMonstors\n    },\n\n    update (dt) {\n        if (this.canAttack == true && this.monstors.length > 0) {\n            for (var index in this.monstors) {\n                var oneMonstor = this.monstors[index]\n                var dis = cc.v2(oneMonstor.x - this.node.x, oneMonstor.y - this.node.y).mag()\n                if (dis <= this.attackRange) {\n                    this.attackOneMonstor(oneMonstor)\n                    break\n                }\n            }\n        }\n    },\n\n    attackOneMonstor(oneMonstor) {\n        this.canAttack = false\n        if (this.bulletEffectPrefab != null) {\n            var effect = cc.instantiate(this.bulletEffectPrefab)\n            effect.x = this.node.x + this.bulletEffectOffset.x\n            effect.y = this.node.y + this.bulletEffectOffset.y\n            var effectMgr = effect.getComponent(\"effectMgr\")\n            effectMgr.effectType = 1\n            if (this.hurtEffectPrefab != null) {\n                effectMgr.hurtEffectPrefab = this.hurtEffectPrefab\n            }  \n            effectMgr.target = oneMonstor\n            effectMgr.delegate = this\n            this.currentEffect = effect\n        }\n        else {\n            if (this.hurtEffectPrefab != null) {\n                var effect = cc.instantiate(this.hurtEffectPrefab)\n                var effectMgr = effect.getComponent(\"effectMgr\")\n                effectMgr.effectType = 2\n                effectMgr.delegate = this\n                this.currentEffect = effect\n            }\n        }\n    \n        var animate = this.node.getComponent(cc.Animation)\n        animate.play(\"attack\")\n    },\n    playEffect() {\n        // if (this.currentEffect != null) {\n        //     cc.find(\"Canvas\").addChild(this.currentEffect)\n        // }\n        var effectType = this.currentEffect.getComponent(\"effectMgr\").effectType\n        if (effectType == 1) {\n            cc.find(\"Canvas\").addChild(this.currentEffect)\n        }\n        else if (effectType == 2) {\n            var target = this.currentEffect.getComponent(\"effectMgr\").target\n            target.addChild(this.currentEffect)\n        }\n    },\n    _acturalHurt(monstor) {\n        if (this.hurtRange == -1) {\n            var monstorMgr = monstor.getComponent(\"monstorMgr\")\n            monstorMgr.getHurt(this.hurt,this.hurtType)\n        }\n        else {\n            var monstorsForHurt = []\n            for (var index in this.monstors) {\n                var oneMonstor = this.monstors[index]\n                if (oneMonstor == monstor) {\n                    monstorsForHurt.push(oneMonstor)\n                }\n                else {\n                    if (this.getDisOfTwoPoint(oneMonstor.position,monstor.position) <= this.hurtRange) {\n                        monstorsForHurt.push(oneMonstor)\n                    }\n                }\n            }\n           \n            if (monstorsForHurt.length > 0) {\n                for (var index in monstorsForHurt) {\n                    var oneMonstor = monstorsForHurt[index]\n                    var monstorMgr = oneMonstor.getComponent(\"monstorMgr\")\n                    monstorMgr.getHurt(this.hurt,this.hurtType)\n                }\n            }\n        }\n    }\n    \n});\n"]}