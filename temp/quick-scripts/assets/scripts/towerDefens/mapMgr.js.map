{"version":3,"sources":["mapMgr.js"],"names":["cc","Class","extends","Component","properties","tileMap","TiledMap","mapSize","Size","tileSize","mapSizeInPix","roadLayer","TiledLayer","pathes","onLoad","initProperties","baseLinePoints","p1","p2","pointPara","v2","givenPoint","result","getCorrespondingPointInParraline","result1","log","x","y","start","node","getComponent","getMapSize","getTileSize","size","width","height","getLayer","pathesObjGroup","getObjectGroup","pathObjects","getObjects","index","onePathObj","position","points","polylinePoints","i","onePoint","nodePosition","convertMapCodiToNodeCodi","key","name","mapOrigin","resultx","resulty","point1","point2","givenPointInBaseLine","x1","y1","x2","y2","xp","yp","k","p","v"],"mappings":"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","file":"mapMgr.js","sourceRoot":"../../../../../assets/scripts/towerDefens","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        tileMap: cc.TiledMap,\n        mapSize: cc.Size,\n        tileSize: cc.Size,\n        mapSizeInPix: cc.Size,\n        roadLayer: cc.TiledLayer,\n        pathes: null\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.initProperties()\n        //for a test\n        var baseLinePoints = this.pathes[\"testPath\"]\n        var p1 = baseLinePoints[0]\n        var p2 = baseLinePoints[1]\n        var pointPara = cc.v2(0,0)\n        var givenPoint = p1\n        var result = this.getCorrespondingPointInParraline(p1,p2,pointPara,givenPoint)\n        var result1 = this.getCorrespondingPointInParraline(p1,p2,pointPara,p2)\n        cc.log(result.x,result.y)\n        cc.log(result1.x,result1.y)\n        cc.log(p1.x,p1.y)\n        cc.log(p2.x,p2.y)\n\n\n    },\n\n    start () {\n\n    },\n\n    initProperties() {\n        this.tileMap = this.node.getComponent(cc.TiledMap)\n        this.mapSize = this.tileMap.getMapSize()\n        this.tileSize = this.tileMap.getTileSize()\n        this.mapSizeInPix = cc.size(this.mapSize.width * this.tileSize.width, this.mapSize.height * this.tileSize.height)\n        this.roadLayer = this.tileMap.getLayer(\"road\")\n        var pathesObjGroup = this.tileMap.getObjectGroup(\"pathes\")\n        var pathObjects = pathesObjGroup.getObjects()\n\n        this.pathes = {}\n        for (var index in pathObjects) {\n            var onePathObj = pathObjects[index]\n            var position = cc.v2(onePathObj.x,onePathObj.y)\n            var points = onePathObj.polylinePoints\n            for (var i in points) {\n                var onePoint = points[i]\n                onePoint.x = position.x + onePoint.x\n                onePoint.y = position.y + onePoint.y\n                var nodePosition = this.convertMapCodiToNodeCodi(onePoint.x,onePoint.y)\n                onePoint.x = nodePosition.x\n                onePoint.y = nodePosition.y\n            }\n            let key = onePathObj.name\n            \n            this.pathes[key] = points\n        }\n    },\n\n    convertMapCodiToNodeCodi(x,y) {\n        var mapOrigin = cc.v2(-1 * this.mapSizeInPix.width /2 , -1 * this.mapSizeInPix.height / 2)\n        var resultx = mapOrigin.x + x\n        var resulty = mapOrigin.y + y\n        return cc.v2(resultx,resulty)\n    },\n\n    getCorrespondingPointInParraline(point1,point2,pointPara,givenPointInBaseLine) {\n        var x1 = point1.x\n        var y1 = point1.y\n        var x2 = point2.x\n        var y2 = point2.y\n        var xp = pointPara.x\n        var yp = pointPara.y\n        var x = givenPointInBaseLine.x\n        var y = givenPointInBaseLine.y\n        var resultx = null\n        var resulty = null\n        if (x2 == x1) {\n            resultx = xp\n            resulty = y\n            \n        }\n        else if (y1 == y2) {\n            resultx = x\n            resulty = yp\n            \n        }\n        else {\n            var k = (y2 - y1) / (x2 - x1)\n            var p = yp - k * xp\n            var v = y + (1 / k) * x\n            resultx = (v - p) / (k + (1 / k))\n            resulty = k * resultx + p\n        }\n        if (resultx != null && resulty != null) {\n            return cc.v2(resultx,resulty)\n        }\n    }\n\n    // update (dt) {},\n});\n"]}