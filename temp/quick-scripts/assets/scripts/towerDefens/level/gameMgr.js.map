{"version":3,"sources":["gameMgr.js"],"names":["cc","Class","extends","Component","properties","refreshPlanId","get","_refreshPlanId","set","value","refreshPlan","require","toString","currentWaveIndex","_currentWaveIndex","onWaveIndexChange","currentMonstorIndex","_currentMonstorIndex","onMonstorIndexChange","resMgr","mapMgr","wavesNum","num","Object","keys","length","monstorsNumOfCurrentWave","monstorsConfig","alivedMonstors","alivedMonstorsNum","_alivedMonstorsNum","onMonstorsOfCurrentWaveCleared","maxHp","currentHp","_currentHp","hpLabel","string","onFail","waveLabel","Label","start","find","getComponent","self","tween","node","delay","call","startRefresh","update","dt","monstorConfig","monstorId","prefab","getMonstorPrefabById","monstor","instantiate","pathId","timeDelta","x","y","push","monstorMgr","basePathPoints","pathes","addChild","scheduleOnce","onMonstorsOfCurrentWaveRefreshComplete","waveDelta","onWin","givenId","monstorObj","resId","reses","director","pause","log"],"mappings":"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","file":"gameMgr.js","sourceRoot":"../../../../../../assets/scripts/towerDefens/level","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        refreshPlanId: {\n            get() {\n                return this._refreshPlanId\n            },\n            set(value) {\n                this._refreshPlanId = value\n                this.refreshPlan = require(\"refreshConfig\")[this.refreshPlanId.toString()]\n            }\n        },\n        refreshPlan: null,\n        currentWaveIndex: {\n            get() {\n                return this._currentWaveIndex\n            },\n            set(value) {\n                this._currentWaveIndex = value\n                this.onWaveIndexChange()\n            }\n        },\n        currentMonstorIndex: {\n            get() {\n                return this._currentMonstorIndex \n            },\n            set(value) {\n                this._currentMonstorIndex = value\n                this.onMonstorIndexChange()\n            }\n        },\n\n        resMgr: null,\n        mapMgr: null,\n\n        wavesNum: {\n            get(){\n                var num = null\n                if (this.refreshPlan != null) {\n                    num = Object.keys(this.refreshPlan).length\n                }\n                return num\n            }\n        },\n\n        monstorsNumOfCurrentWave: {\n            get() {\n                var num = null\n                if (this.refreshPlan != null) {\n                    //num = Object.keys(this.refreshPlan[this.currentWaveIndex.toString()].monstorsConfig).length\n                    var monstorsConfig = this.refreshPlan[this.currentWaveIndex.toString()].monstorsConfig\n                    num = Object.keys(monstorsConfig).length\n                }\n                return num\n            }\n        },\n\n        alivedMonstors: [],\n        alivedMonstorsNum: {\n            get() {\n                return this._alivedMonstorsNum\n            },\n            set(value) {\n                this._alivedMonstorsNum = value\n                if (value == 0) {\n                    this.onMonstorsOfCurrentWaveCleared()\n                }\n            }\n        },\n\n        maxHp: 10,\n        currentHp: {\n            get() {\n                return this._currentHp\n            },\n            set(value) {\n                this._currentHp = value\n                this.hpLabel.string = value.toString() + \" / \" + this.maxHp.toString()\n                if (value == 0) {\n                    this.onFail()\n                }\n            }\n        },\n\n        waveLabel: cc.Label,\n        hpLabel: cc.Label\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.resMgr = cc.find(\"Canvas/resNode\").getComponent(\"resMgr\")\n        this.mapMgr = cc.find(\"Canvas/mapNode\").getComponent(\"mapMgr\")\n        this.currentHp = this.maxHp\n        this.waveLabel.string = \"0 / \" + this.wavesNum.toString()\n\n        //test\n        var self = this\n        cc.tween(this.node)\n            .delay(2)\n            .call(function(){\n                self.startRefresh()\n            })\n            .start()\n    },\n\n    update (dt) {\n\n    },\n\n    startRefresh() {\n        this.currentWaveIndex = 1\n    },\n\n    onWaveIndexChange() {\n        this.waveLabel.string = this.currentWaveIndex.toString() + \" / \" + this.wavesNum.toString()\n        this.currentMonstorIndex = 1\n    },\n\n    onMonstorIndexChange() {\n        var monstorConfig = this.refreshPlan[this.currentWaveIndex.toString()].monstorsConfig[this.currentMonstorIndex.toString()]\n        var monstorId = monstorConfig.monstorId\n        var prefab = this.getMonstorPrefabById(monstorId)\n        var monstor = cc.instantiate(prefab)\n        var pathId = monstorConfig.pathId\n        var timeDelta = monstorConfig.timeDelta\n\n        monstor.x = -1000\n        monstor.y = -1000\n        this.alivedMonstors.push(monstor)\n        this.alivedMonstorsNum = this.alivedMonstors.length\n        \n        var monstorMgr = monstor.getComponent(\"monstorMgr\")\n        monstorMgr.basePathPoints = this.mapMgr.pathes[pathId.toString()]\n\n        cc.find(\"Canvas\").addChild(monstor)\n        if (this.currentMonstorIndex < this.monstorsNumOfCurrentWave) {\n            var self = this\n            this.scheduleOnce(function(){\n                self.currentMonstorIndex += 1\n            },timeDelta)\n        }\n        else {\n            this.onMonstorsOfCurrentWaveRefreshComplete()\n        }\n    },\n\n    onMonstorsOfCurrentWaveRefreshComplete() {\n\n    },\n\n    onMonstorsOfCurrentWaveCleared(){\n        if (this.currentWaveIndex < this.wavesNum) {\n            var waveDelta = this.refreshPlan[this.currentWaveIndex.toString()].waveDelta\n            var self = this\n            this.scheduleOnce(function(){\n                self.currentWaveIndex += 1\n            },waveDelta)\n        }\n\n        else {\n            this.onWin()\n        }\n    },\n\n    getMonstorPrefabById(givenId) {\n        var monstorConfig = require(\"monstorConfig\")\n        var monstorObj = monstorConfig[givenId.toString()]\n        var resId = monstorObj.resId\n        var prefab = this.resMgr.reses[resId.toString()][\"prefabName\"]\n        return prefab\n    },\n\n    onWin() {\n\n    },\n\n    onFail() {\n        cc.director.pause()\n        cc.log(\"YOU LOSE\")\n    }\n\n});\n"]}