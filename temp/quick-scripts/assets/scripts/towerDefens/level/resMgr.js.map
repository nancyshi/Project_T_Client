{"version":3,"sources":["resMgr.js"],"names":["cc","Class","extends","Component","properties","isAllResesLoaded","get","_isAllResesLoaded","set","value","log","completeCallBack","target","onAllResesLoaded","resesNum","_resesNum","loadedResesNum","_loadedResesNum","reses","_reses","monstors","towers","enabledTowerIds","onLoad","start","loadNeededReses","monstorIds","refreshPlan","node","parent","getChildByName","getComponent","k","monstorsConfig","key","monstorId","some","x","push","monstorConfig","require","monstorPrefabNames","index","id","prefabName","towerPrefabNames","towerId","towerConfig","toString","levelConfig","monstorPrefabsNum","Object","keys","length","towerPrefabsNum","url","loader","loadRes","err","res"],"mappings":"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","file":"resMgr.js","sourceRoot":"../../../../../../assets/scripts/towerDefens/level","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        isAllResesLoaded: {\n            get() {\n                return this._isAllResesLoaded\n            },\n            set(value) {\n                this._isAllResesLoaded = value\n                if (value == true) {\n                    cc.log(\"COMPLET\")\n                    if (this.completeCallBack != null) {\n                        this.completeCallBack(this)\n                    }\n                    if(this.target == null) {\n                        return\n                    }\n                    this.target.onAllResesLoaded()\n                }\n            }\n        },\n        resesNum: {\n            get() {\n                return this._resesNum\n            },\n            set(value) {\n                this._resesNum = value\n            }\n        },\n        loadedResesNum: {\n            get() {\n                return this._loadedResesNum\n            },\n            set(value) {\n                this._loadedResesNum = value\n                if (value == this.resesNum) {\n                    this.isAllResesLoaded = true\n                }\n            }\n        },\n        reses: {\n            get() {\n                if (this._reses == null) {\n                    this._reses = {\n                        monstors: {},\n                        towers: {}\n                    }\n                }\n                return this._reses\n            },\n            set(value) {\n                this._reses = value\n            }\n        },\n        target: null,\n        completeCallBack: null,\n        enabledTowerIds: []\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n\n    },\n\n    start () {\n\n    },\n\n    loadNeededReses() {\n        //load monstors and towers prefabs\n        var monstorIds = []\n        var refreshPlan = this.node.parent.getChildByName(\"gameMgrNode\").getComponent(\"gameMgr\").refreshPlan\n        for (var k in refreshPlan) {\n            var monstorsConfig = refreshPlan[k].monstorsConfig\n            for (var key in monstorsConfig) {\n                var monstorId = monstorsConfig[key].monstorId\n                if (monstorIds.some(function(x){return x == monstorId}) == false) {\n                    monstorIds.push(monstorId)\n                }\n            }\n        }\n\n        var monstorConfig = require(\"monstorConfig\")\n        var monstorPrefabNames = {}\n        for (var index in monstorIds) {\n            var id = monstorIds[index]\n            var prefabName = monstorConfig[id].prefabName\n            monstorPrefabNames[id] = prefabName\n        }\n        var towerPrefabNames = {}\n        for (var index in this.enabledTowerIds) {\n            var towerId = this.enabledTowerIds[index]\n            var towerConfig = require(\"towerConfig\")[towerId.toString()]\n            towerPrefabNames[towerId.toString()] = {}\n            for (var key in towerConfig) {\n                var levelConfig = towerConfig[key]\n                var prefabName = levelConfig.prefabName\n                towerPrefabNames[towerId.toString()][key] = prefabName\n            }\n        }\n        var monstorPrefabsNum = Object.keys(monstorPrefabNames).length\n        var towerPrefabsNum = 0 \n        for(var key in towerPrefabNames) {\n            var levelConfig = towerPrefabNames[key]\n            towerPrefabsNum += Object.keys(levelConfig).length\n        }\n\n\n        this.resesNum = monstorPrefabsNum + towerPrefabsNum\n        this.loadedResesNum = 0\n\n        for(var key in monstorPrefabNames) {\n            (function(key,target){\n                var prefabName = monstorPrefabNames[key]\n                var url = \"prefabs/monstors/\" + prefabName\n                cc.loader.loadRes(url,function(err,res){\n                    target.reses.monstors[key] = res\n                    target.loadedResesNum += 1\n                })\n            })(key,this)\n        }\n\n        for (var key in towerPrefabNames) {\n            this.reses.towers[key] = {}\n            var levelConfig = towerPrefabNames[key]\n            for (var k in levelConfig) {\n                (function(k,target){\n                    var prefabName = levelConfig[k]\n                    var url = \"prefabs/towers/\" + prefabName\n                    cc.loader.loadRes(url,function(err,res){\n                        target.reses.towers[key][k] = res\n                        target.loadedResesNum += 1\n                    })\n                })(k,this)\n            }\n        }\n\n    },\n\n    \n\n    \n\n    // update (dt) {},\n});\n"]}