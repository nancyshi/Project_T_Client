{"version":3,"sources":["monstorMgr.js"],"names":["cc","Class","extends","Component","properties","basePathPoints","state","get","_state","set","value","onReachFinalTarget","onDie","maxHealth","_maxHeath","processBar","node","getChildByName","getComponent","ProgressBar","progress","health","_heath","isHeathBarHidden","_isHeathBarHidden","heathBarNode","active","heathBarShowLastTime","_heathBarShowLastTime","moveSpeed","target","vx","vy","targetIndex","gameMgr","hurt","attackRange","hurtRange","hurtDelta","hurtType","physicalDefense","magicDefense","currentEnmy","canAttack","_canAttack","self","scheduleOnce","onLoad","start","x","y","t","getDisOfTwoPoint","position","find","anim","Animation","play","update","dt","nextX","nextY","length","attackEnmy","calculatePathPoints","p1","p2","temp","Math","sqrt","index","alivedMonstors","splice","alivedMonstorsNum","removeFromParent","heathMinusNum","currentHp","anime","animState","duration","tween","delay","call","getHurt","hurtNum","givenType","acturalHurt","hurtEnmy"],"mappings":"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","file":"monstorMgr.js","sourceRoot":"../../../../../../assets/scripts/towerDefens/monstors","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        basePathPoints: [],\n        state: {\n            get() {\n                return this._state\n            },\n            set(value) {\n                this._state = value\n                if (value == 2) {\n                    this.onReachFinalTarget()\n                }\n                else if (value == 3) {\n                    this.onDie()\n                }\n            }\n        //STATE ENUM\n        //0 default , do nothing\n        //1 go to target\n        //2 reach final target\n        //3 die\n        //4 battle\n        },\n        maxHealth: {\n            get() {\n                if (this._maxHeath == null) {\n                    this._maxHeath = 100\n                    return this._maxHeath\n                }\n                else {\n                    return this._maxHeath\n                }\n            },\n            set(value) {\n                this._maxHeath = value\n                var processBar = this.node.getChildByName(\"heathProcessBar\").getComponent(cc.ProgressBar)\n                processBar.progress = this.health / value\n            }\n        },\n        health: {\n            get() {\n                if (this._heath == null) {\n                    this._heath = 100\n                    return this._heath\n                }\n                else {\n                    return this._heath\n                }\n            },\n            set(value) {\n                this._heath = value\n                var processBar = this.node.getChildByName(\"heathProcessBar\").getComponent(cc.ProgressBar)\n                processBar.progress = value / this.maxHealth\n            }\n        },\n        isHeathBarHidden: {\n            get() {\n                if (this._isHeathBarHidden == null) {\n                    this._isHeathBarHidden = true\n                }\n                return this._isHeathBarHidden\n            },\n            set(value) {\n                this._isHeathBarHidden = value\n                var heathBarNode = this.node.getChildByName(\"heathProcessBar\")\n                \n                heathBarNode.active = !value\n            }\n        },\n        heathBarShowLastTime: {\n            get() {\n                return this._heathBarShowLastTime\n            },\n            set(value) {\n                this._heathBarShowLastTime = value\n                if (value <= 0) {\n                    this.isHeathBarHidden = true\n                }\n            }\n        },\n        moveSpeed: 100,\n\n        target: null,\n        vx: null,\n        vy: null,\n        targetIndex: 1,\n        gameMgr: null,\n\n        //battle properties\n        hurt: 10,\n        attackRange: 10,\n        hurtRange: -1,\n        hurtDelta: 0.5,\n        hurtType: 1, // while 1 indicate physical ,and 2 indicate magic\n        physicalDefense: 2,\n        magicDefense: 0,\n        currentEnmy: null,\n\n        canAttack: {\n            get() {\n                if (this._canAttack == null) {\n                    this._canAttack = true\n                }\n                return this._canAttack\n            },\n\n            set(value) {\n                this._canAttack = value\n                if (value == false) {\n                    var self = this\n                    this.scheduleOnce(function(){\n                        self.canAttack = true\n                    },this.hurtDelta)\n                }\n            }\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n    },\n\n    start () {\n        this.node.x = this.basePathPoints[0].x\n        this.node.y = this.basePathPoints[0].y\n        this.target = this.basePathPoints[this.targetIndex]\n        var t = this.getDisOfTwoPoint(this.node.position,this.target) / this.moveSpeed\n        this.vx = (this.target.x - this.node.x) / t\n        this.vy = (this.target.y - this.node.y) / t\n\n        this.maxHealth = 100\n        this.health = 100\n        this.gameMgr = cc.find(\"Canvas/gameMgrNode\").getComponent(\"gameMgr\")\n        this.state = 1\n        var anim = this.node.getComponent(cc.Animation)\n        anim.play(\"walk\")\n    },\n\n    update (dt) {\n        if (this.state == 1) {\n            var nextX = this.node.x + this.vx * dt\n            var nextY = this.node.y + this.vy * dt\n            if (this.vx != 0) {\n                if ((nextX >= this.target.x && nextX > this.node.x) || (nextX <= this.target.x && nextX < this.node.x)) {\n                    nextX = this.target.x\n                    nextY = this.target.y\n                }\n            }\n            else {\n                if ((nextY >= this.target.y && nextY > this.node.y) || (nextY <= this.target.y && nextY < this.node.y)) {\n                    nextX = this.target.x\n                    nextY = this.target.y\n                }\n            }\n            this.node.x = nextX\n            this.node.y = nextY\n\n            if (nextX == this.target.x && nextY == this.target.y) {\n                if (this.targetIndex + 1 < this.basePathPoints.length ) {\n                    this.targetIndex += 1\n                    this.target = this.basePathPoints[this.targetIndex]\n                    var t = this.getDisOfTwoPoint(this.node.position,this.target) / this.moveSpeed\n                    this.vx = (this.target.x - this.node.x) / t\n                    this.vy = (this.target.y - this.node.y) / t\n                }\n                else {\n                    this.state = 2\n                }\n            }\n\n        }\n\n        else if (this.state == 4) {\n            if (this.canAttack == true) {\n                this.canAttack = false\n                this.attackEnmy()\n            }\n        }\n\n        if (this.heathBarShowLastTime > 0 ) {\n            this.heathBarShowLastTime -= dt\n        }\n    },\n\n    calculatePathPoints () {\n        \n    },\n\n    getDisOfTwoPoint(p1,p2) {\n        var temp = (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y)\n        return Math.sqrt(temp)\n    },\n\n    onReachFinalTarget() {\n        \n        var temp = null\n        for (var index in this.gameMgr.alivedMonstors) {\n            if (this.node == this.gameMgr.alivedMonstors[index]) {\n                temp = index\n                break\n            }\n        }\n        if (temp != null) {\n            this.gameMgr.alivedMonstors.splice(index,1)\n            this.gameMgr.alivedMonstorsNum = this.gameMgr.alivedMonstors.length\n        }\n        this.node.removeFromParent()\n        \n        var heathMinusNum = 1\n        this.gameMgr.currentHp -= heathMinusNum\n    },\n\n    onDie() {\n        \n        var temp = null\n        for (var index in this.gameMgr.alivedMonstors) {\n            if (this.node == this.gameMgr.alivedMonstors[index]) {\n                temp = index\n                break\n            }\n        }\n        if (temp != null) {\n            this.gameMgr.alivedMonstors.splice(index,1)\n            this.gameMgr.alivedMonstorsNum = this.gameMgr.alivedMonstors.length\n        }\n\n        var anime = this.node.getComponent(cc.Animation)\n        var animState = anime.play(\"die\")\n        var duration = animState.duration\n        var self = this\n        cc.tween(this.node)\n            .delay(duration)\n            .call(function(){\n                self.node.removeFromParent()\n            })\n            .start()\n    },\n\n    getHurt(hurtNum,givenType) {\n        this.heathBarShowLastTime = 3\n        this.isHeathBarHidden = false\n        var acturalHurt = null\n        switch(givenType) {\n            case 1:\n                acturalHurt = hurtNum * hurtNum / (hurtNum + this.physicalDefense)\n                break\n            case 2: \n                acturalHurt = hurtNum  * hurtNum/ (hurtNum + this.magicDefense)\n                break\n            default:\n                acturalHurt = hurtNum * hurtNum / (hurtNum  + this.physicalDefense)\n\n        }\n\n        var temp = this.health - acturalHurt\n        if (temp <= 0) {\n            this.health = 0\n            this.state = 3\n        }\n        else {\n            this.health = temp\n        }\n    },\n\n    attackEnmy() {\n        var anim = this.node.getComponent(cc.Animation)\n        anim.play(\"attack\")\n    },\n\n    hurtEnmy() {\n        this.currentEnmy.getHurt(this.hurt,this.hurtType)\n    }\n});\n"]}