{"version":3,"sources":["battleElementMgr.js"],"names":["cc","Class","extends","Component","properties","maxHp","currentHp","get","_currentHp","set","value","delegate","onDie","hpBar","progress","hurt","physicalDefense","magicalDefense","ProgressBar","isAutoHideHpBar","hpBarContinueTime","_hpBarLastTimer","__hpBarLastTimer","node","active","start","getHurt","hurtNum","hurtType","_appearHpBar","actureHurt","Math","floor","console","error","getBuff","buffId","update","dt"],"mappings":"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","file":"battleElementMgr.js","sourceRoot":"../../../../../assets/scripts/towerDefens","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        maxHp: 100,\n        currentHp: {\n            get() {\n                if (this._currentHp == null) {\n                    this._currentHp = this.maxHp\n                }\n                return this._currentHp\n            },\n            set(value) {\n                if (value > this.maxHp) {\n                    value = this.maxHp\n                }\n                else if (value < 0) {\n                    value = 0\n                }\n\n                this._currentHp = value\n                if (this.delegate != null && value == 0) {\n                    this.delegate.onDie()\n                }\n                if (this.hpBar) {\n                    this.hpBar.progress = this.currentHp / this.maxHp\n                }\n            }\n        },\n        hurt: 100,\n\n        physicalDefense: 100,\n        magicalDefense: 200,\n\n        hpBar: cc.ProgressBar,\n        isAutoHideHpBar: true,\n        hpBarContinueTime: 3,  //when on attack, the hp bar will auto appear, and last for this time , mesured by second\n\n        _hpBarLastTimer: {\n            get() {\n                return this.__hpBarLastTimer\n            },\n            set(value) {\n                this.__hpBarLastTimer = value\n                if (value >= this.hpBarContinueTime) {\n                    this._hpBarLastTimer = null\n                    this.hpBar.node.active = false\n                }\n            }\n        },\n\n        delegate: null\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    getHurt(hurtNum, hurtType) {\n        this._appearHpBar()\n        if (hurtNum > 0) {\n            //hurt flow\n            var actureHurt = null\n            switch (hurtType) {\n                case 1: //physical\n                    actureHurt = Math.floor(hurtNum * hurtNum / (hurtNum + this.physicalDefense))\n                    break\n                case 2: //magical\n                    actureHurt = Math.floor(hurtNum * hurtNum / (hurtNum + this.magicalDefense))\n                    break\n                default:\n                    actureHurt = Math.floor(hurtNum * hurtNum / (hurtNum + this.physicalDefense))\n            }\n            if (actureHurt) {\n                this.currentHp -= actureHurt\n            }\n            else {\n                cc.console.error(\"NOT INVALID HURT NUM OF \" + actureHurt);\n            }\n        }\n        else if (hurtNum < 0) {\n            //cure flow\n            this.currentHp += hurtNum\n        }\n    },\n\n    getBuff(buffId) {\n\n    },\n    update (dt) {\n        if (this.isAutoHideHpBar == true && this._hpBarLastTimer != null) {\n            this._hpBarLastTimer += dt\n        }\n    },\n\n    _appearHpBar() {\n        if (this.hpBar.node.active == false) {\n            this.hpBar.node.active = true\n            if (this.isAutoHideHpBar == true) {\n                this._hpBarLastTimer = 0\n            }\n        }\n    }\n});\n"]}